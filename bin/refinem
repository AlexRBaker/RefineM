#!/usr/bin/env python
###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Donovan Parks"
__copyright__ = "Copyright 2015"
__credits__ = ["Donovan Parks"]
__license__ = "GPL3"
__maintainer__ = "Donovan Parks"
__email__ = "donovan.parks@gmail.com"
__status__ = "Development"

import os
import sys
import tempfile
import argparse

from refinem.main import OptionsParser
from biolib.misc.custom_help_formatter import CustomHelpFormatter, ChangeTempAction


def version():
    """Read program version from file."""
    bin_dir = os.path.dirname(os.path.realpath(__file__))
    version_file = open(os.path.join(bin_dir, '..', 'refinem', 'VERSION'))
    return version_file.read().strip()


def print_help():
    """Help menu."""

    print ''
    print '                ...::: RefineM v' + version() + ' :::...'''
    print '''\

    Reduce contamination:
     taxa_profile -> Generate a taxonomic profile of scaffolds within a genome
     gene_profile -> Generate taxonomic profile of genes across scaffolds within a genome
     outliers     -> [not implemented] Identify scaffolds with divergent GC, coverage, or tetranucleotide signatures
     euk_origin   -> [not implemented] Identify scaffolds with a coding density suggestive of a Eukaryotic origin

    Improve completeness:
     reference    -> Identify scaffolds with similarity to specific reference genome(s)
     compatible   -> [not implemented] Identify scaffolds with compatible GC, coverage, and tetranucleotide signatures
     merge        -> [not implemented] Identify partial genomes which should be merged together (requires CheckM)

    Modify genome:
     modify       -> [not implemented] Modify scaffolds in a genome

    Genome validation and exploration:
     unique       -> Ensure sequences are assigned to a single genome
     bin_compare  -> Compare two sets of bins/genomes (e.g., from alternative binning methods)
     bin_union    -> [not implemented] Merge multiple binning efforts into a single bin set

    Utility functions:
     unbinned     -> Identify unbinned scaffolds
     coverage     -> [not implemented] Calculate coverage of sequences
     tetra        -> [not implemented] Calculate tetranucleotide signature of sequences

  Use: refinem <command> -h for command specific help.

  Feature requests or bug reports can be sent to Donovan Parks (donovan.parks@gmail.com)
    or posted on GitHub (https://github.com/dparks1134/refinem).
    '''

if __name__ == '__main__':

    # initialize the options parser
    parser = argparse.ArgumentParser(add_help=False)
    subparsers = parser.add_subparsers(help="--", dest='subparser_name')

    # taxonomically classify scaffolds
    taxa_profile_parser = subparsers.add_parser('taxa_profile',
                                        formatter_class=CustomHelpFormatter,
                                        description='Generate a taxonomic profile of scaffolds within a genome.')
    taxa_profile_parser.add_argument('genome_dir', help="directory containing genomes")
    taxa_profile_parser.add_argument('db_file', help="database of reference genomes")
    taxa_profile_parser.add_argument('taxonomy_file', help="taxonomic assignment of each reference genomes")
    taxa_profile_parser.add_argument('output_dir', help="output directory")
    taxa_profile_parser.add_argument('-e', '--evalue', type=float, default=1e-3, help="e-value of valid hits")
    taxa_profile_parser.add_argument('-p', '--per_identity', type=float, default=30.0, help="percent identity of valid hits")
    # taxa_profile_parser.add_argument('--blastx', action="store_true", default=False, help="use blastx instead of diamond")
    taxa_profile_parser.add_argument('-w', '--window_size', type=int, default=500, help="size of fragments to classify")
    taxa_profile_parser.add_argument('-s', '--step_size', type=int, default=500, help="base pairs to shift between fragments")
    taxa_profile_parser.add_argument('-x', '--genome_ext', default='fna', help="extension of genomes (other files in folder are ignored)")
    taxa_profile_parser.add_argument('--tmpdir', action=ChangeTempAction, default=tempfile.gettempdir(), help="specify alternative directory for temporary files")
    taxa_profile_parser.add_argument('-c', '--cpus', help='number of CPUs to use', type=int, default=16)

    # taxonomically classify genes within genome
    gene_profile_parser = subparsers.add_parser('gene_profile',
                                        formatter_class=CustomHelpFormatter,
                                        description='Generate taxonomic profile of genes across scaffolds within a genome.')
    gene_profile_parser.add_argument('genome_dir', help="directory containing genomes")
    gene_profile_parser.add_argument('db_file', help="database of reference genomes")
    gene_profile_parser.add_argument('taxonomy_file', help="taxonomic assignment of each reference genomes")
    gene_profile_parser.add_argument('output_dir', help="output directory")
    gene_profile_parser.add_argument('-e', '--evalue', type=float, default=1e-3, help="e-value of valid hits")
    gene_profile_parser.add_argument('-p', '--per_identity', type=float, default=30.0, help="percent identity of valid hits")
    gene_profile_parser.add_argument('-x', '--genome_ext', default='fna', help="extension of genomes (other files in folder are ignored)")
    gene_profile_parser.add_argument('--tmpdir', action=ChangeTempAction, default=tempfile.gettempdir(), help="specify alternative directory for temporary files")
    gene_profile_parser.add_argument('-c', '--cpus', help='number of CPUs to use', type=int, default=16)

    # Modify a bin
    modify_parser = subparsers.add_parser('modify',
                                            formatter_class=CustomHelpFormatter,
                                            description='Modify scaffolds in a genome.')
    modify_parser.add_argument('scaffold_file', help="scaffolds binned to generate putative genomes")
    modify_parser.add_argument('genome_file', help="genome to be modified")
    modify_parser.add_argument('output_genome', help="modified genome")
    modify_parser.add_argument('-a', '--add', action='append', help="ID of scaffold to add to genome (may specify multiple times)")
    modify_parser.add_argument('-r', '--remove', action='append', help="ID of scaffold to remove from bin (may specify multiple times)")
    modify_parser.add_argument('-o', '--outlier_file', help="remove all scaffolds identified as outliers (see outlier command)")

    # Ensure sequences are assigned to a single bin
    unique_parser = subparsers.add_parser('unique',
                                            formatter_class=CustomHelpFormatter,
                                            description='Ensure sequences are assigned to a single genome.')
    unique_parser.add_argument('genome_dir', help="directory containing genomes")
    unique_parser.add_argument('-x', '--genome_ext', default='fna', help="extension of genomes (other files in folder are ignored)")

    # Compare two sets of bins (e.g., from alternative binning methods)
    bin_compare_parser = subparsers.add_parser('bin_compare',
                                               formatter_class=CustomHelpFormatter,
                                               description='Compare two sets of bins.')
    bin_compare_parser.add_argument('scaffold_file', help="scaffolds binned to generate putative genomes")
    bin_compare_parser.add_argument('genomes_dir1', help="directory containing genomes")
    bin_compare_parser.add_argument('genomes_dir2', help="directory containing genomes")
    bin_compare_parser.add_argument('output_file', help="output file indicating overlap between bins")

    bin_compare_parser.add_argument('-x', '--genome_ext1', default='fna', help="extension of genomes in directory 1")
    bin_compare_parser.add_argument('-y', '--genome_ext2', default='fna', help="extension of genomes in directory 2")

    # identify scaffolds with similarity to a set of reference genomes
    reference_parser = subparsers.add_parser('reference',
                                        formatter_class=CustomHelpFormatter,
                                        description='Identify scaffolds with similarity to specific reference genome(s).')
    reference_parser.add_argument('scaffold_file', help="scaffolds to search")
    reference_parser.add_argument('ref_genome_dir', help="directory containing reference genomes of interest")
    reference_parser.add_argument('db_file', help="database of competing reference genomes")
    reference_parser.add_argument('output_dir', help="output directory")
    reference_parser.add_argument('-g', '--genome_dir', help="directory containing genomes binned from the specified scaffolds")
    reference_parser.add_argument('--coverage', help="file containing coverage information for each scaffold")
    reference_parser.add_argument('-e', '--evalue', type=float, default=1e-3, help="e-value of valid hits")
    reference_parser.add_argument('-p', '--per_identity', type=float, default=30.0, help="percent identity of valid hits")
    reference_parser.add_argument('-x', '--genome_ext', default='fna', help="extension of genomes (other files in folder are ignored)")
    reference_parser.add_argument('--tmpdir', action=ChangeTempAction, default=tempfile.gettempdir(), help="specify alternative directory for temporary files")
    reference_parser.add_argument('-c', '--cpus', help='number of CPUs to use', type=int, default=16)

    # identify unbinned sequences
    unbinned_parser = subparsers.add_parser('unbinned',
                                            formatter_class=CustomHelpFormatter,
                                            description='Identify unbinned sequences.')
    unbinned_parser.add_argument('genome_dir', help="directory containing genomes")
    unbinned_parser.add_argument('scaffold_file', help="scaffolds binned to generate putative genomes")
    unbinned_parser.add_argument('output_file', help="output file containing unbinned scaffolds")
    unbinned_parser.add_argument('-x', '--genome_ext', default='fna', help="extension of genomes (other files in folder are ignored)")
    unbinned_parser.add_argument('-s', '--min_seq_len', type=int, default=0, help="ignore scaffolds shorter than the specified length")

    # get and check options
    args = None
    if(len(sys.argv) == 1 or sys.argv[1] == '-h' or sys.argv == '--help'):
        print_help()
        sys.exit(0)
    else:
        args = parser.parse_args()

    # do what we came here to do
    try:
        parser = OptionsParser()
        if(False):
            # import pstats
            # p = pstats.Stats('prof')
            # p.sort_stats('cumulative').print_stats(10)
            # p.sort_stats('time').print_stats(10)
            import cProfile
            cProfile.run('parser.parse_options(args)', 'prof')
        elif False:
            import pdb
            pdb.run(parser.parse_options(args))
        else:
            parser.parse_options(args)
    except SystemExit:
        print "\n  Controlled exit resulting from an unrecoverable error or warning."
    except:
        print "\nUnexpected error:", sys.exc_info()[0]
        raise
